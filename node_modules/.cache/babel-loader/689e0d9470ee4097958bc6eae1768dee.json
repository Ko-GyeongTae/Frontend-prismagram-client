{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ko-gyeongtae/Documents/prismagram-frontend/src/Routes/Auth/AuthContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport AuthPresenter from \"./AuthPresenter\";\nimport useInput from \"../../Hooks/useInput\";\nimport { CREATE_ACCOUNT, LOG_IN } from \"./AuthQueries\";\nimport { useMutation } from \"react-apollo-hooks\";\nimport { toast } from \"react-toastify\";\nexport default _s(() => {\n  _s();\n\n  const [action, setAction] = useState(\"logIn\");\n  const username = useInput(\"\");\n  const firstName = useInput(\"\");\n  const lastName = useInput(\"\");\n  const email = useInput(\"\");\n  const [requestSecret] = useMutation(LOG_IN, {\n    update: (_, {\n      data\n    }) => {\n      const {\n        requestSecret\n      } = data;\n\n      if (!requestSecret) {\n        toast.error(\"You don't have an account yet, create one\");\n        setTimeout(() => setAction(\"signup\"), 2000);\n      }\n    },\n    variables: {\n      email: email.value\n    }\n  });\n  const createAccount = useMutation(CREATE_ACCOUNT, {\n    variables: {\n      email: email.value,\n      username: username.value,\n      firstName: firstName.value,\n      lastName: lastName.value\n    }\n  });\n  console.log(action);\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (action === \"logIn\") {\n      console.log(action);\n\n      if (email.value !== \"\") {\n        requestSecret();\n      } else {\n        toast.error(\"Email is required\");\n      }\n    } else if (action === \"signUp\") {\n      if (email.value !== \"\" && username.value !== \"\" && firstName.value !== \"\" && lastName.value !== \"\") {\n        createAccount();\n      } else {\n        toast.error(\"All field are required\");\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthPresenter, {\n    setAction: setAction,\n    action: action,\n    username: username,\n    firstName: firstName,\n    lastName: lastName,\n    email: email,\n    onSubmit: onSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}, \"U2fJFKd9bR99w5skXOWhsS4aixI=\", false, function () {\n  return [useInput, useInput, useInput, useInput, useMutation, useMutation];\n});","map":{"version":3,"sources":["/Users/ko-gyeongtae/Documents/prismagram-frontend/src/Routes/Auth/AuthContainer.js"],"names":["React","useState","AuthPresenter","useInput","CREATE_ACCOUNT","LOG_IN","useMutation","toast","action","setAction","username","firstName","lastName","email","requestSecret","update","_","data","error","setTimeout","variables","value","createAccount","console","log","onSubmit","e","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport AuthPresenter from \"./AuthPresenter\";\nimport useInput from \"../../Hooks/useInput\";\nimport { CREATE_ACCOUNT, LOG_IN } from \"./AuthQueries\";\nimport { useMutation } from \"react-apollo-hooks\";\nimport { toast } from \"react-toastify\";\n\nexport default () => {\n  const [action, setAction] = useState(\"logIn\");\n  const username = useInput(\"\");\n  const firstName = useInput(\"\");\n  const lastName = useInput(\"\");\n  const email = useInput(\"\");\n  const [requestSecret] = useMutation(LOG_IN, {\n    update: (_, { data }) => {\n      const { requestSecret } = data;\n      if (!requestSecret) {\n        toast.error(\"You don't have an account yet, create one\");\n        setTimeout(() => setAction(\"signup\"), 2000);\n      }\n    },\n    variables: { email: email.value },\n  });\n  const createAccount = useMutation(CREATE_ACCOUNT, {\n    variables: {\n      email: email.value,\n      username: username.value,\n      firstName: firstName.value,\n      lastName: lastName.value,\n    },\n  });\n  console.log(action);\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (action === \"logIn\") {\n        console.log(action);\n      if (email.value !== \"\") {\n        requestSecret();\n      } else {\n        toast.error(\"Email is required\");\n      }\n    } else if (action === \"signUp\") {\n      if (\n        email.value !== \"\" &&\n        username.value !== \"\" &&\n        firstName.value !== \"\" &&\n        lastName.value !== \"\"\n      ) {\n        createAccount();\n      } else {\n        toast.error(\"All field are required\");\n      }\n    }\n  };\n\n  return (\n    <AuthPresenter\n      setAction={setAction}\n      action={action}\n      username={username}\n      firstName={firstName}\n      lastName={lastName}\n      email={email}\n      onSubmit={onSubmit}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}