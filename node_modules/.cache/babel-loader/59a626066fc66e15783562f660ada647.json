{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ko-gyeongtae/Documents/prismagram-frontend/src/Routes/Auth/AuthContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport AuthPresenter from \"./AuthPresenter\";\nimport useInput from \"../../Hooks/useInput\";\nimport { CONFIRM_SECRET, CREATE_ACCOUNT, LOCAL_LOG_IN, LOG_IN } from \"./AuthQueries\";\nimport { useMutation } from \"react-apollo-hooks\";\nimport { toast } from \"react-toastify\";\nexport default _s(() => {\n  _s();\n\n  const [action, setAction] = useState(\"logIn\");\n  const username = useInput(\"\");\n  const firstName = useInput(\"\");\n  const lastName = useInput(\"\");\n  const secret = useInput(\"\");\n  const email = useInput(\"\");\n  const [requestSecretMutation] = useMutation(LOG_IN, {\n    variables: {\n      email: email.value\n    }\n  });\n  const [createAccountMutation] = useMutation(CREATE_ACCOUNT, {\n    variables: {\n      email: email.value,\n      username: username.value,\n      firstName: firstName.value,\n      lastName: lastName.value\n    }\n  });\n  const [confirmSecretMutation] = useMutation(CONFIRM_SECRET, {\n    variables: {\n      email: email.value,\n      secret: secret.value\n    }\n  });\n  const [localLogInMutation] = useMutation(LOCAL_LOG_IN);\n\n  const onSubmit = async e => {\n    e.preventDefault();\n\n    if (action === \"logIn\") {\n      if (email.value !== \"\") {\n        try {\n          const {\n            data: {\n              requestSecret\n            }\n          } = await requestSecretMutation();\n\n          if (!requestSecret) {\n            toast.error(\"You don't have an account yet, create one\");\n            setTimeout(() => setAction(\"signUp\"), 3000);\n          } else {\n            toast.success(\"Check your in box for your login secret\");\n            setAction(\"confirm\");\n          }\n        } catch {\n          toast.error(\"Can't request secret, try again\");\n        }\n      } else {\n        toast.error(\"Email is required\");\n      }\n    } else if (action === \"signUp\") {\n      if (email.value !== \"\" && username.value !== \"\" && firstName.value !== \"\" && lastName.value !== \"\") {\n        try {\n          const {\n            data: {\n              createAccount\n            }\n          } = await createAccountMutation();\n\n          if (!createAccount) {\n            toast.error(\"Can't create account\");\n          } else {\n            toast.success(\"Account created! Log In now\");\n            setTimeout(() => setAction(\"logIn\"), 3000);\n          }\n        } catch (e) {\n          toast.error(e.message);\n        }\n      } else {\n        toast.error(\"All field are required\");\n      }\n    } else if (action === \"confirm\") {\n      if (secret.value !== \"\") {\n        try {\n          const {\n            data: {\n              confirmSecret: token\n            }\n          } = await confirmSecretMutation();\n\n          if (token !== \"\" && token !== undefined) {\n            localLogInMutation({\n              variables: {\n                token\n              }\n            });\n          } else {\n            throw Error();\n          }\n        } catch {\n          toast.error(\"Can't confirm secret, check again\");\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthPresenter, {\n    setAction: setAction,\n    action: action,\n    username: username,\n    firstName: firstName,\n    lastName: lastName,\n    email: email,\n    secret: secret,\n    onSubmit: onSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}, \"rYk1ACRI/IZin/ITbfOxMNSpxv0=\", false, function () {\n  return [useInput, useInput, useInput, useInput, useInput, useMutation, useMutation, useMutation, useMutation];\n});","map":{"version":3,"sources":["/Users/ko-gyeongtae/Documents/prismagram-frontend/src/Routes/Auth/AuthContainer.js"],"names":["React","useState","AuthPresenter","useInput","CONFIRM_SECRET","CREATE_ACCOUNT","LOCAL_LOG_IN","LOG_IN","useMutation","toast","action","setAction","username","firstName","lastName","secret","email","requestSecretMutation","variables","value","createAccountMutation","confirmSecretMutation","localLogInMutation","onSubmit","e","preventDefault","data","requestSecret","error","setTimeout","success","createAccount","message","confirmSecret","token","undefined","Error"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport AuthPresenter from \"./AuthPresenter\";\nimport useInput from \"../../Hooks/useInput\";\nimport { CONFIRM_SECRET, CREATE_ACCOUNT, LOCAL_LOG_IN, LOG_IN } from \"./AuthQueries\";\nimport { useMutation } from \"react-apollo-hooks\";\nimport { toast } from \"react-toastify\";\n\nexport default () => {\n  const [action, setAction] = useState(\"logIn\");\n  const username = useInput(\"\");\n  const firstName = useInput(\"\");\n  const lastName = useInput(\"\");\n  const secret = useInput(\"\");\n  const email = useInput(\"\");\n  const [requestSecretMutation] = useMutation(LOG_IN, {\n    variables: { email: email.value }\n  });\n  const [createAccountMutation] = useMutation(CREATE_ACCOUNT, {\n    variables: {\n      email: email.value,\n      username: username.value,\n      firstName: firstName.value,\n      lastName: lastName.value\n    }\n  });\n  const [confirmSecretMutation] = useMutation(CONFIRM_SECRET, {\n      variables:{\n          email:email.value,\n          secret:secret.value\n      }\n  });\n  const [localLogInMutation] = useMutation(LOCAL_LOG_IN);\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    if (action === \"logIn\") {\n      if (email.value !== \"\") {\n        try {\n          const { data:{requestSecret} } = await requestSecretMutation();\n          if (!requestSecret) {\n            toast.error(\"You don't have an account yet, create one\");\n            setTimeout(() => setAction(\"signUp\"), 3000);\n          } else {\n            toast.success(\"Check your in box for your login secret\");\n            setAction(\"confirm\");\n          }\n        } catch {\n          toast.error(\"Can't request secret, try again\");\n        }\n      } else {\n        toast.error(\"Email is required\");\n      }\n    } else if (action === \"signUp\") {\n      if (\n        email.value !== \"\" &&\n        username.value !== \"\" &&\n        firstName.value !== \"\" &&\n        lastName.value !== \"\"\n      ) {\n        try {\n          const { data:{createAccount} } = await createAccountMutation();\n          if (!createAccount) {\n            toast.error(\"Can't create account\");\n          } else {\n            toast.success(\"Account created! Log In now\");\n            setTimeout(() => setAction(\"logIn\"), 3000);\n          }\n        } catch (e) {\n          toast.error(e.message);\n        }\n      } else {\n        toast.error(\"All field are required\");\n      }\n    } else if(action === \"confirm\"){\n        if(secret.value !== \"\"){\n            try{\n                const { data:{confirmSecret:token} } = await confirmSecretMutation();\n                if(token !== \"\" && token !== undefined){\n                    localLogInMutation({\n                        variables:{\n                            token\n                        }\n                    });\n                } else {\n                    throw Error()\n                }\n            } catch {\n                toast.error(\"Can't confirm secret, check again\");\n            }\n        }\n    }\n  };\n\n  return (\n    <AuthPresenter\n      setAction={setAction}\n      action={action}\n      username={username}\n      firstName={firstName}\n      lastName={lastName}\n      email={email}\n      secret={secret}\n      onSubmit={onSubmit}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}