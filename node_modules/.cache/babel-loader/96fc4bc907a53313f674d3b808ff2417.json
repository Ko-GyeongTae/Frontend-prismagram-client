{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ko-gyeongtae/Documents/prismagram-frontend/src/Components/Post/PostContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useInput from \"../../Hooks/useInput\";\nimport PostPresenter from \"./PostPresenter\";\nimport { ADD_COMMENT, TOGGLE_LIKE } from \"./PostQueries\";\n\nconst PostContainer = ({\n  id,\n  user,\n  files,\n  likeCount,\n  isLiked,\n  comments,\n  createdAt,\n  caption,\n  location\n}) => {\n  _s();\n\n  const [isLikedS, setIsLiked] = useState(isLiked);\n  const [likeCountS, setLikeCount] = useState(likeCount);\n  const [currentItem, setCurrentItem] = useState(0);\n  const comment = useInput(\"\");\n  const [toggleLikeMutation] = useMutation(TOGGLE_LIKE, {\n    variables: {\n      postId: id\n    }\n  });\n  const [addComment] = useMutation(ADD_COMMENT, {\n    variables: {\n      postId: id,\n      text: comment.value\n    }\n  });\n\n  const slide = () => {\n    const totalFiles = files.length;\n\n    if (currentItem === totalFiles - 1) {\n      setTimeout(() => setCurrentItem(0), 2000);\n    } else {\n      setTimeout(() => setCurrentItem(currentItem + 1), 2000);\n    }\n  };\n\n  useEffect(() => {\n    slide();\n  }, [currentItem]);\n\n  const toggleLike = () => {\n    if (isLiked === true) {\n      setIsLiked(false);\n    } else {\n      setIsLiked(true);\n    }\n  };\n\n  console.log(currentItem);\n  return /*#__PURE__*/_jsxDEV(PostPresenter, {\n    user: user,\n    files: files,\n    likeCount: likeCountS,\n    location: location,\n    caption: caption,\n    isLiked: isLikedS,\n    comments: comments,\n    createdAt: createdAt,\n    newComment: comment,\n    setIsLiked: setIsLiked,\n    setLikeCount: setLikeCount,\n    currentItem: currentItem,\n    toggleLike: toggleLike\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostContainer, \"xx8zWcxnIUqlcJI84OipiIztyPs=\", true, function () {\n  return [useInput];\n});\n\n_c = PostContainer;\nPostContainer.propTypes = {\n  id: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    avatar: PropTypes.string.isRequired,\n    username: PropTypes.string.isRequired\n  }).isRequired,\n  files: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired\n  })).isRequired,\n  likeCount: PropTypes.number.isRequired,\n  isLiked: PropTypes.bool.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n    user: PropTypes.shape({\n      id: PropTypes.string,\n      username: PropTypes.string\n    }).isRequired\n  })).isRequired,\n  caption: PropTypes.string.isRequired,\n  location: PropTypes.string,\n  createdAt: PropTypes.string.isRequired\n};\nexport default PostContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostContainer\");","map":{"version":3,"sources":["/Users/ko-gyeongtae/Documents/prismagram-frontend/src/Components/Post/PostContainer.js"],"names":["React","useState","useEffect","PropTypes","useInput","PostPresenter","ADD_COMMENT","TOGGLE_LIKE","PostContainer","id","user","files","likeCount","isLiked","comments","createdAt","caption","location","isLikedS","setIsLiked","likeCountS","setLikeCount","currentItem","setCurrentItem","comment","toggleLikeMutation","useMutation","variables","postId","addComment","text","value","slide","totalFiles","length","setTimeout","toggleLike","console","log","propTypes","string","isRequired","shape","avatar","username","arrayOf","url","number","bool"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,eAAzC;;AAEA,MAAMC,aAAa,GAAG,CAAC;AACrBC,EAAAA,EADqB;AAErBC,EAAAA,IAFqB;AAGrBC,EAAAA,KAHqB;AAIrBC,EAAAA,SAJqB;AAKrBC,EAAAA,OALqB;AAMrBC,EAAAA,QANqB;AAOrBC,EAAAA,SAPqB;AAQrBC,EAAAA,OARqB;AASrBC,EAAAA;AATqB,CAAD,KAUhB;AAAA;;AACJ,QAAM,CAACC,QAAD,EAAWC,UAAX,IAAyBlB,QAAQ,CAACY,OAAD,CAAvC;AACA,QAAM,CAACO,UAAD,EAAaC,YAAb,IAA6BpB,QAAQ,CAACW,SAAD,CAA3C;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAMuB,OAAO,GAAGpB,QAAQ,CAAC,EAAD,CAAxB;AACA,QAAM,CAACqB,kBAAD,IAAuBC,WAAW,CAACnB,WAAD,EAAc;AAClDoB,IAAAA,SAAS,EAAE;AAACC,MAAAA,MAAM,EAAEnB;AAAT;AADuC,GAAd,CAAxC;AAGA,QAAM,CAACoB,UAAD,IAAeH,WAAW,CAACpB,WAAD,EAAc;AAC1CqB,IAAAA,SAAS,EAAE;AAACC,MAAAA,MAAM,EAAEnB,EAAT;AAAaqB,MAAAA,IAAI,EAAEN,OAAO,CAACO;AAA3B;AAD+B,GAAd,CAAhC;;AAGA,QAAMC,KAAK,GAAG,MAAM;AAClB,UAAMC,UAAU,GAAGtB,KAAK,CAACuB,MAAzB;;AACA,QAAIZ,WAAW,KAAKW,UAAU,GAAG,CAAjC,EAAoC;AAClCE,MAAAA,UAAU,CAAC,MAAMZ,cAAc,CAAC,CAAD,CAArB,EAA0B,IAA1B,CAAV;AACD,KAFD,MAEO;AACLY,MAAAA,UAAU,CAAC,MAAMZ,cAAc,CAACD,WAAW,GAAG,CAAf,CAArB,EAAwC,IAAxC,CAAV;AACD;AACF,GAPD;;AAQApB,EAAAA,SAAS,CAAC,MAAM;AACd8B,IAAAA,KAAK;AACN,GAFQ,EAEN,CAACV,WAAD,CAFM,CAAT;;AAIA,QAAMc,UAAU,GAAG,MAAM;AACvB,QAAGvB,OAAO,KAAK,IAAf,EAAoB;AAChBM,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAFD,MAEO;AACHA,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH;AACF,GAND;;AAQAkB,EAAAA,OAAO,CAACC,GAAR,CAAYhB,WAAZ;AAEA,sBACE,QAAC,aAAD;AACE,IAAA,IAAI,EAAEZ,IADR;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,SAAS,EAAES,UAHb;AAIE,IAAA,QAAQ,EAAEH,QAJZ;AAKE,IAAA,OAAO,EAAED,OALX;AAME,IAAA,OAAO,EAAEE,QANX;AAOE,IAAA,QAAQ,EAAEJ,QAPZ;AAQE,IAAA,SAAS,EAAEC,SARb;AASE,IAAA,UAAU,EAAES,OATd;AAUE,IAAA,UAAU,EAAEL,UAVd;AAWE,IAAA,YAAY,EAAEE,YAXhB;AAYE,IAAA,WAAW,EAAEC,WAZf;AAaE,IAAA,UAAU,EAAEc;AAbd;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CA5DD;;GAAM5B,a;UAcYJ,Q;;;KAdZI,a;AA8DNA,aAAa,CAAC+B,SAAd,GAA0B;AACxB9B,EAAAA,EAAE,EAAEN,SAAS,CAACqC,MAAV,CAAiBC,UADG;AAExB/B,EAAAA,IAAI,EAAEP,SAAS,CAACuC,KAAV,CAAgB;AACpBjC,IAAAA,EAAE,EAAEN,SAAS,CAACqC,MAAV,CAAiBC,UADD;AAEpBE,IAAAA,MAAM,EAAExC,SAAS,CAACqC,MAAV,CAAiBC,UAFL;AAGpBG,IAAAA,QAAQ,EAAEzC,SAAS,CAACqC,MAAV,CAAiBC;AAHP,GAAhB,EAIHA,UANqB;AAOxB9B,EAAAA,KAAK,EAAER,SAAS,CAAC0C,OAAV,CACL1C,SAAS,CAACuC,KAAV,CAAgB;AACdjC,IAAAA,EAAE,EAAEN,SAAS,CAACqC,MAAV,CAAiBC,UADP;AAEdK,IAAAA,GAAG,EAAE3C,SAAS,CAACqC,MAAV,CAAiBC;AAFR,GAAhB,CADK,EAKLA,UAZsB;AAaxB7B,EAAAA,SAAS,EAAET,SAAS,CAAC4C,MAAV,CAAiBN,UAbJ;AAcxB5B,EAAAA,OAAO,EAAEV,SAAS,CAAC6C,IAAV,CAAeP,UAdA;AAexB3B,EAAAA,QAAQ,EAAEX,SAAS,CAAC0C,OAAV,CACR1C,SAAS,CAACuC,KAAV,CAAgB;AACdjC,IAAAA,EAAE,EAAEN,SAAS,CAACqC,MAAV,CAAiBC,UADP;AAEdX,IAAAA,IAAI,EAAE3B,SAAS,CAACqC,MAAV,CAAiBC,UAFT;AAGd/B,IAAAA,IAAI,EAAEP,SAAS,CAACuC,KAAV,CAAgB;AACpBjC,MAAAA,EAAE,EAAEN,SAAS,CAACqC,MADM;AAEpBI,MAAAA,QAAQ,EAAEzC,SAAS,CAACqC;AAFA,KAAhB,EAGHC;AANW,GAAhB,CADQ,EASRA,UAxBsB;AAyBxBzB,EAAAA,OAAO,EAAEb,SAAS,CAACqC,MAAV,CAAiBC,UAzBF;AA0BxBxB,EAAAA,QAAQ,EAAEd,SAAS,CAACqC,MA1BI;AA2BxBzB,EAAAA,SAAS,EAAEZ,SAAS,CAACqC,MAAV,CAAiBC;AA3BJ,CAA1B;AA8BA,eAAejC,aAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useInput from \"../../Hooks/useInput\";\nimport PostPresenter from \"./PostPresenter\";\nimport { ADD_COMMENT, TOGGLE_LIKE } from \"./PostQueries\";\n\nconst PostContainer = ({\n  id,\n  user,\n  files,\n  likeCount,\n  isLiked,\n  comments,\n  createdAt,\n  caption,\n  location,\n}) => {\n  const [isLikedS, setIsLiked] = useState(isLiked);\n  const [likeCountS, setLikeCount] = useState(likeCount);\n  const [currentItem, setCurrentItem] = useState(0);\n  const comment = useInput(\"\");\n  const [toggleLikeMutation] = useMutation(TOGGLE_LIKE, {\n      variables: {postId: id}\n  });\n  const [addComment] = useMutation(ADD_COMMENT, {\n      variables: {postId: id, text: comment.value}\n  });\n  const slide = () => {\n    const totalFiles = files.length;\n    if (currentItem === totalFiles - 1) {\n      setTimeout(() => setCurrentItem(0), 2000);\n    } else {\n      setTimeout(() => setCurrentItem(currentItem + 1), 2000);\n    }\n  };\n  useEffect(() => {\n    slide();\n  }, [currentItem]);\n\n  const toggleLike = () => {\n    if(isLiked === true){\n        setIsLiked(false);\n    } else {\n        setIsLiked(true);\n    }\n  }\n\n  console.log(currentItem);\n\n  return (\n    <PostPresenter\n      user={user}\n      files={files}\n      likeCount={likeCountS}\n      location={location}\n      caption={caption}\n      isLiked={isLikedS}\n      comments={comments}\n      createdAt={createdAt}\n      newComment={comment}\n      setIsLiked={setIsLiked}\n      setLikeCount={setLikeCount}\n      currentItem={currentItem}\n      toggleLike={toggleLike}\n    />\n  );\n};\n\nPostContainer.propTypes = {\n  id: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    avatar: PropTypes.string.isRequired,\n    username: PropTypes.string.isRequired,\n  }).isRequired,\n  files: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  likeCount: PropTypes.number.isRequired,\n  isLiked: PropTypes.bool.isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      text: PropTypes.string.isRequired,\n      user: PropTypes.shape({\n        id: PropTypes.string,\n        username: PropTypes.string,\n      }).isRequired,\n    })\n  ).isRequired,\n  caption: PropTypes.string.isRequired,\n  location: PropTypes.string,\n  createdAt: PropTypes.string.isRequired,\n};\n\nexport default PostContainer;\n"]},"metadata":{},"sourceType":"module"}