{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ko-gyeongtae/Documents/prismagram-frontend/src/Components/Post/PostContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useInput from \"../../Hooks/useInput\";\nimport PostPresenter from \"./PostPresenter\";\n\nconst PostContainer = ({\n  id,\n  user,\n  files,\n  likeCount,\n  isLiked,\n  comments,\n  createdAt,\n  caption,\n  location\n}) => {\n  _s();\n\n  const [isLikedS, setIsLiked] = useState(isLiked);\n  const [likeCountS, setLikeCount] = useState(likeCount);\n  const [currentItem, setCurrentItem] = useState(0);\n  useEffect(() => {\n    setInterval(slide, 2000);\n  }, []);\n\n  const slide = () => {\n    const totalFiles = files.length;\n\n    if (currentItem === totalFiles - 1) {\n      setCurrentItem(0);\n    } else {\n      setCurrentItem(currentItem + 1);\n    }\n  };\n\n  const comment = useInput(\"\");\n  return /*#__PURE__*/_jsxDEV(PostPresenter, {\n    user: user,\n    files: files,\n    likeCount: likeCountS,\n    location: location,\n    caption: caption,\n    isLiked: isLikedS,\n    comments: comments,\n    createdAt: createdAt,\n    newComment: comment,\n    setIsLiked: setIsLiked,\n    setLikeCount: setLikeCount\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostContainer, \"+y7HmSxChTMqJ6mc+gYY7ERvkGk=\", false, function () {\n  return [useInput];\n});\n\n_c = PostContainer;\nPostContainer.propTypes = {\n  id: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    avatar: PropTypes.string.isRequired,\n    username: PropTypes.string.isRequired\n  }).isRequired,\n  files: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired\n  })).isRequired,\n  likeCount: PropTypes.number.isRequired,\n  isLiked: PropTypes.bool.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    text: PropTypes.string.isRequired,\n    user: PropTypes.shape({\n      id: PropTypes.string,\n      username: PropTypes.string\n    }).isRequired\n  })).isRequired,\n  caption: PropTypes.string.isRequired,\n  location: PropTypes.string,\n  createdAt: PropTypes.string.isRequired\n};\nexport default PostContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostContainer\");","map":{"version":3,"sources":["/Users/ko-gyeongtae/Documents/prismagram-frontend/src/Components/Post/PostContainer.js"],"names":["React","useState","useEffect","PropTypes","useInput","PostPresenter","PostContainer","id","user","files","likeCount","isLiked","comments","createdAt","caption","location","isLikedS","setIsLiked","likeCountS","setLikeCount","currentItem","setCurrentItem","setInterval","slide","totalFiles","length","comment","propTypes","string","isRequired","shape","avatar","username","arrayOf","url","number","bool","text"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useInput from \"../../Hooks/useInput\";\nimport PostPresenter from \"./PostPresenter\";\n\nconst PostContainer = ({\n  id,\n  user,\n  files,\n  likeCount,\n  isLiked,\n  comments,\n  createdAt,\n  caption,\n  location\n}) => {\n  const [isLikedS, setIsLiked] = useState(isLiked);\n  const [likeCountS, setLikeCount] = useState(likeCount);\n  const [currentItem, setCurrentItem] = useState(0);\n  useEffect(() => {\n      setInterval(slide, 2000);\n  }, []);\n  const slide = () => {\n  const totalFiles = files.length;\n    if(currentItem === totalFiles - 1){\n        setCurrentItem(0);\n    } else {\n        setCurrentItem(currentItem + 1);\n    }\n  }\n  const comment = useInput(\"\");\n  return (\n    <PostPresenter\n      user={user}\n      files={files}\n      likeCount={likeCountS}\n      location={location}\n      caption={caption}\n      isLiked={isLikedS}\n      comments={comments}\n      createdAt={createdAt}\n      newComment={comment}\n      setIsLiked={setIsLiked}\n      setLikeCount={setLikeCount}\n    />\n  );\n};\n\nPostContainer.propTypes = {\n  id: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    avatar: PropTypes.string.isRequired,\n    username: PropTypes.string.isRequired,\n  }).isRequired,\n  files: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  likeCount: PropTypes.number.isRequired,\n  isLiked: PropTypes.bool.isRequired,\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      text: PropTypes.string.isRequired,\n      user: PropTypes.shape({\n        id: PropTypes.string,\n        username: PropTypes.string,\n      }).isRequired,\n    })\n  ).isRequired,\n  caption: PropTypes.string.isRequired,\n  location: PropTypes.string,\n  createdAt: PropTypes.string.isRequired\n};\n\nexport default PostContainer;\n"]},"metadata":{},"sourceType":"module"}